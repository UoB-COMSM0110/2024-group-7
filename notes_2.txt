use specification: response implemetation of features

 Making a use case specification and diagram enabled the group to look at the project from a different perspective, allowing us to identify the scope of our Pack Man game. We were able to streamline our ideas for the game into a protocol that will enable us to implement the structure of the game. When creating the diagram, we could focus on specific elements of the game and how they interact with each other. For example, when users play the game, we will need to implement features to move the character, collect gold, collect power-ups, display current points and power-ups, etc. Additionally, this process also made us begin to think about how to implement the multiplayer aspect of our game; in terms of how the two actors (players one and two) interact to create an online multiplayer game. Creating a use case also helped us start to understand how we need to think about the architecture of the game and how we will programme it

the user (1st player) clicks the button which creates the game to get a room number.
the 1st player shares the room number with their friend (2nd player).
2nd player enters number in the box on their computer to join the game
the 2nd computer sends message through internet to first computer to connect game.
1st player chooses the mode and press start.
now both users are playing on the same game.
the screen updates when players collect points and power ups.
when the first player dies, the game updates and turns the player into a ghost.
when the second player dies, the leaderboard comes up and shows the final points.
there is an option to start a new game.

Use-Case Specifications

Easy mode: The platform will only move from the bottom to the top and there are no obstacles.

Basic flow: The user plays the game with less than three lives lost.

The system displays the main page, which includes the START, ABOUT HELP, and LEADERBOARD.
The user presses START to start playing.
The system displays the difficulty level: EASY, MEDIUM, or HARD.
The user chooses EASY.
The system generates the game interface.
The user uses left and right arrow keys to control the crab to move to the next platform and collect coins to increase the number of lives.
The user aims to achieve the highest possible score before running out of lives.

Alternative flow:

If the user hits a spike or falls off, the user loses one life and the system automatically returns the crab to a certain position to continue the game.
The users lose all their three lives during the game.
The game ends, and a screen pops up asking the player to either play a 'NEW GAME' or return to 'HOME'.

Medium mode: The system adds obstacles and platforms that move left and right to the game interface based on easy mode.

Basic flow: The user plays the game with less than three lives lost.

The system displays the main page, which includes the START, ABOUT HELP, and LEADERBOARD.
The user presses START to start playing.
The system displays the difficulty level: EASY, MEDIUM, or HARD.
The user chooses MEDIUM.
The system generates the game interface.
The user uses left and right arrow keys to control the crab to move to the next platform and collect coins to increase the number of lives.
User aims to achieve the highest possible score before running out of lives.

Alternative flow:

If the user hits a spike or obstacles, or falls off, the user loses one life and the system automatically returns the crab to a certain position to continue the game.
The users lose all their three lives during the game.
The game ends, and a screen pops up asking the player to either play a 'NEW GAME' or return to 'HOME'.

Hard mode: The system adds an ascending map, map switch timer, and jumping functions based on the medium mode.

Basic flow: The user plays the game with less than three lives lost.

The system displays the main page, which includes the START, ABOUT HELP, and LEADERBOARD.
The user presses START to start playing.
The system displays the difficulty level: EASY, MEDIUM, or HARD.
The user chooses HARD.
The system generates the game interface.
The user uses left and right arrow keys to control the crab to move to the next platform and collect coins to increase the number of lives.
When the map switching timer shows 0, the system will automatically change a new map for the user: the platform changes to move from top to bottom.
The user controls the left and right keys and space bar to move the crab.
User aims to achieve the highest possible score before running out of lives.

Alternative flow:

If the user hits a spike or obstacles, or falls off, the user loses one life and the system automatically returns the crab to a certain position to continue the game.
The users lose all their three lives during the game.
The game ends, and a screen pops up asking the player to either play a 'NEW GAME' or return to 'HOME'.


Use-Case Specification

Easy Mode
Use-Case Section 	vs Human 	vs Computer
Description 	A run through of the game on easy mode 	A run-through of the game on easy mode, against a computer
Basic Flow 	Two players compete to get a higher score to win the game with no one losing all of his health points. 	The player and the computer compete to get a higher score to win the game, with neither losing all of their health points.
1. 	Each user presses the left mouse button, drags the mouse to determine the strength and direction, and releases the mouse to shoot. Each player can take one shot each turn. 	The player presses the left mouse button, drags the mouse to determine the strength and direction, and releases the mouse to shoot. The player and the computer can take one shot each turn. The actions of the computer in these aspects are automated.
2. 	The user who is shot will lose his health points. 	The player and the computer lose health points when shot.
3. 	The users can collect weapons and skills by shooting the stars. 	The player can collect weapons and skills by shooting the stars, while the computer's actions are automated.
4. 	The users can adjust their position by pressing A and D. 	The player can adjust position by pressing A and D, and the computer will automatically make adjustment of its position.
5. 	The number of rounds will decrease after each user takes a shot. 	The number of rounds will decrease after each side takes a shot.
6. 	The number of rounds decrease to 0 and the result is shown with the option to try again. 	The number of rounds decrease to 0 and the result is shown with the option to try again.
Alternative Flow 		
1. 	Each user presses the left mouse button, drags the mouse to determine the strength and direction, and releases the mouse to shoot. Each player can take one shot each turn. 	The player presses the left mouse button, drags the mouse to determine the strength and direction, and releases the mouse to shoot. The actions of artificial intelligence in these areas are automated. The player and artificial intelligence can take one shot each turn.
2. 	The user who is shot will lose his health point. 	The player and the computer lose health points when shot.
3. 	The users can collect weapons and skills by shooting the stars. 	The player can collect weapons and skills by shooting the stars, while the computer's actions are automated.
4. 	The users can adjust their position by pressing A and D. 	The player can adjust position by pressing A and D, and the computer will automatically make adjustment of its position.
5. 	The number of rounds will decrease after each user takes a shot. 	The number of rounds will decrease after each side takes a shot.
6. 	The user has lost all of his health points within 10 rounds and the result is shown with the option to try again. 	The player has lost all of the health points within 10 rounds and the result is shown with the option to try again.

Difficult Mode
Use-Case Section 	vs Human 	vs Computer
Description 	A run through of the game on hard mode 	1 player run through of the game on hard mode, against a computer
Basic Flow 	Shoot your opponent until his/her HP becomes zero 	Shoot the computer until its HP becomes zero, or your own becomes zero
1. 	Players can choose their own planet, each planet has different gravity 	Players can choose their own planet, each planet has different gravity
2. 	LEFT-CLICK and drag the mouse to control throwing power and angle (User can choose to hit the star or opponent) 	LEFT-CLICK and drag the mouse to control throwing power and angle (User can choose to hit the star or opponent)
3. 	May appear strong wind and change the trajectory of the arrow 	ay appear strong wind and change the trajectory of the arrow
4. 	Hit opponent, their HP will be reduced [A1, A2, A3] 	Hit opponent, their HP will be reduced [A1, A2, A3]
5. 	Change sides 	Change sides, computer will take their turn

Alternative Flow 		
A1 	1. Hit a star, skill points will increase 	
2. Back to Basic Flow 5. 	
A2 	1. Hit a star, star becomes black hole 	
2. No skill points will be added 	
3. Back to Basic Flow 5. 	
A3 	1. Hit the ground 	
2. The ground breaks 	
3. Back to Basic Flow 5. 	
======= 		

vs Human or vs Computer

then settings screen
choose how many rounds you want to play
how much health each player should have
the number of planets

Points system + shop

Gravity planets; choosing between moon, mars, earth, etc.

Interactive terrain (destroyable by certain items in the shop ? )

solar wind ? like in TANKS, raft wars

black holes ?

shooting stars mechanics
probabilities to do certain things
turn into a planet/black hole (which can be turned off in the settings)
gaining points etc

camera zooms in on the following of an arrow

whether to do a half and half screen where one side has negative gravity, or multiple planets completely visible on the screen

player can move around the planet rather than shoot for a move

moving to other planets ? maybe an item in the shop

HP bars and blood

Targets on other planets which give points when shot

Final screen: player X wins

Use-Case Specifications

login use case

System shows: Login page display

User enter:inlog in parameters

System checks: checks the paramterswith the existing users

if it existing,match the game login with their account. Else show page for new log in / register account

entered main page of game

Show the details of user’s game (levels/ existing highscore/ start game button )User clicks onto the start game button(entered start game loading page)

System showing instructions of game, there is a level button (bottom left/ healthbar+ hp bar on top left)

User starts playing using WASD

System creates more zombies zoning into the user

Character continuously shooting bullet, moving around around according to the user’s button input

Once moving and killed zombie, user walks to the gems to collect and system displays increase hp . System display health decrease if user attacked by zombie

System displays hp to be full (indicator of entering next level system needs to know that we need to go to next level). Will display weapon upgrade page User to choose upgrade

entered page of level 2

System to implement upgrades

System display next level page

System needs to reset the different bars

Repeat till end of game (same )

entered page of win after level2

Show congratulation page

Show timer of how long it took to complete level 2

System displays timing onto the scoresheet(if higher,puton top, else place below , if first time playing, place timinginmiddle, highlight the current game score using border ) [ show timing next to name , do not overwrite , show existing scorestohighlightimprovement]

System display back to original page showing the login


Difficult to write user stories when the features of the game haven’t been fully clarified
Difficult to work on tasks (e.g. create user stories, list stakeholders) independently, because these tasks depend on each other. Better for everyone to get together and do everything as a group
Doing things as a group also gives people a sense of ownership and allows everyone to contribute to everything. Also makes sure we don’t miss anything or have blindspots
Writing user stories / use cases can highlight areas of ambiguity that need to be clarified in the group, for example (in the use case specification), does the player use arrow keys or swipes to move the snake? What button does the player press to shoot venom?
This task forces us to come up with the name of the game
Task highlighted the need for an agreed workflow for collaborating on the repo (i.e. do we add everything in the README on main branch, or work on separate branches? Do we each have our own branch or dedicated “feature” branches?)
So far we only have two personas in our user stories (player and marker). Does this mean we’re missing something? Is this because the user stories were written independently of the stakeholders list?
Writing user stories can highlight that we want to measure subjective things like enjoyment and experience of nostalgia. This suggests that we need to find ways to measure subjective experience
Use case diagram:
Do we have any relationships other than “extends”?
Highlights ambiguity: does the snake die when its tail is cut off, or just shrink, or only die if it loses a certain amount of its tail

Basic Flow 	
1. 	Player uses the the right key on the mouse to make Super Spaceman move up defying gravity.
2. 	Super Spaceman trys to advoid all hazards.
3. 	Super Spaceman eventually hit a hazard. Scoure is then placed on the screen in terms of time.

Use-case (player):

Player start the games
Player choose which map to play

In level #?

System generates new level
User waits for ‘enemies’ to spawn and move throughout screen
User places units to protect towers.
System uses enemy sprites to attack players towers. Randomised attacks within set limits dependant on progress through game.
System presents options of tower to user and highlights areas where the towers can be places
User selects type of towers and locations to place in.
System decrements (money??) total i.e. reduces amount of towers that can be placed.
User limited by this feature.

..Repeats until user lives are expended or no enemies left..

Player reaches end of level and game ends
System asks player for Name
System checks database for existing name and if unique, stores score in database
System presents high score to user.
System exits

Use case specification for user story 1:

Player opens the game and sees an intuitive navigation menu.
Player selects tutorial.
Tutorial opens showing the player a basic level that builds up from the basics in separate screens, focusing on one thing at a time.
Player reaches the end of the tutorial and is taken back to the home screen so they can decide whether to do the tutorial again or play the full game.

Use case specification for user story 7:

Player opens game
Player selects to skip tutorial (already has pre-existing knowledge of game, keybinds, enemies, etc.)
Player enters nickname to be displayed on leaderboard
Player successfully navigates through complete game.
Success screen is displayed
Followed by leaderboard - including position, score, top 10?
Options to restart, quit


the user (1st player) clicks the button which creates the game to get a room number.
the 1st player shares the room number with their friend (2nd player).
2nd player enters number in the box on their computer to join the game
the 2nd computer sends message through internet to first computer to connect game.
1st player chooses the mode and press start.
now both users are playing on the same game.
the screen updates when players collect points and power ups.
when the first player dies, the game updates and turns the player into a ghost.
when the second player dies, the leaderboard comes up and shows the final points.
there is an option to start a new game.