<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>GameLoop</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <mainClass>org.example.GameLoop</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.diffplug.spotless</groupId>
                <artifactId>spotless-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
                <version>${spotless.version}</version>
                <configuration>
                    <!-- optional: limit format enforcement to just the files changed by this feature branch -->
                    <ratchetFrom>origin/main</ratchetFrom>
                    <formats>
                        <!-- you can define as many formats as you want, each is independent -->
                        <format>
                            <!-- define the files to apply to -->
                            <includes>
                                <include>.gitattributes</include>
                                <include>.gitignore</include>
                            </includes>
                            <!-- define the steps to apply to those files -->
                            <trimTrailingWhitespace/>
                            <endWithNewline/>
                            <indent>
                                <tabs>true</tabs>
                                <spacesPerTab>4</spacesPerTab>
                            </indent>
                        </format>
                    </formats>
                    <!-- define a language-specific format -->
                    <java>
                        <!-- These are the defaults, you can override if you want -->
                        <includes>
                            <include>src/main/java/**/*.java</include>
                            <include>src/test/java/**/*.java</include>
                        </includes>

                        <!-- Cleanthat will refactor your code, but it may break your style: apply it before your formatter -->
                        <cleanthat />        <!-- has its own section below -->

                        <googleJavaFormat /> <!-- has its own section below -->
                        <importOrder /> <!-- standard import order -->
                        <importOrder>  <!-- or a custom ordering -->
                            <wildcardsLast>false</wildcardsLast> <!-- Optional, default false. Sort wildcard import after specific imports -->
                            <order>java|javax,org,com,com.diffplug,,\#com.diffplug,\#</order>  <!-- or use <file>${project.basedir}/eclipse.importorder</file> -->
                            <!-- you can use an empty string for all the imports you didn't specify explicitly, '|' to join group without blank line, and '\#` prefix for static imports. -->
                            <semanticSort>false</semanticSort> <!-- Optional, default false. Sort by package, then class, then member (for static imports). Splitting is based on common conventions (packages are lower case, classes start with upper case). Use <treatAsPackage> and <treatAsClass> for exceptions. -->
                            <treatAsPackage> <!-- Packages starting with upper case letters. -->
                                <package>com.example.MyPackage</package>
                            </treatAsPackage>
                            <treatAsClass> <!-- Classes starting with lower case letters. -->
                                <class>com.example.myClass</class>
                            </treatAsClass>
                        </importOrder>

                        <removeUnusedImports /> <!-- self-explanatory -->

                        <formatAnnotations />  <!-- fixes formatting of type annotations, see below -->
                        <googleJavaFormat>
                            <version>1.8</version>                      <!-- optional, 1.8 is minimum supported version -->
                            <style>GOOGLE</style>                       <!-- or AOSP (optional) -->
                            <reflowLongStrings>true</reflowLongStrings> <!-- optional -->
                            <formatJavadoc>false</formatJavadoc>        <!-- optional -->
                            <!-- optional: custom group artifact (you probably don't need this) -->
                            <groupArtifact>com.google.googlejavaformat:google-java-format</groupArtifact>
                        </googleJavaFormat>
                        <licenseHeader>
                            <content>/* (C)$YEAR */</content>  <!-- or <file>${project.basedir}/license-header</file> -->
                        </licenseHeader>
                    </java>
                </configuration>
            </plugin>
        </plugins>
    </build>
  <dependencies>
      <dependency>
         <groupId>processing</groupId>
         <artifactId>processing</artifactId>
         <scope>compile</scope>
         <version>3.4</version>
         <systemPath>${basedir}/src/lib/core.jar</systemPath>
      </dependency>
   </dependencies>
</project>